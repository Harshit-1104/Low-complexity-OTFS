`timescale 1ns / 1ps

module bit_error_counter(
  input [31:0] tx_message,
  input [31:0] rx_message,
  output reg [31:0] error_bits,
  output reg [31:0] error_count
);

integer i;
always @ (tx_message, rx_message) begin
  error_count = 0;
  error_bits = tx_message ^ rx_message;
  for (i=0; i<32; i=i+1) begin
    if (error_bits[i] == 1) begin
      error_count = error_count + 1;
    end
  end
end

endmodule

module bit_error_counter_tb;

reg [31:0] tx_message;
reg [31:0] rx_message;
wire [31:0] error_bits;
wire [31:0] error_count;

bit_error_counter dut(
  .tx_message(tx_message),
  .rx_message(rx_message),
  .error_bits(error_bits),
  .error_count(error_count)
);
initial begin
  $display("Test started");
  tx_message = 32'b001101110000000111111111111000101;
  rx_message = 32'b000011111111111111110101010101010;
  #1;
  $display("Tx message: %b", tx_message);
  $display("Rx message: %b", rx_message);
  $display("Error bits: %b", error_bits);
  $display("Error count: %d", error_count);
  
  tx_message = 32'b1111;
  rx_message = 32'b1010;
  #1;
   $display("Tx message: %b", tx_message);
  $display("Rx message: %b", rx_message);
  $display("Error bits: %b", error_bits);
  $display("Error count: %d", error_count);
  end
  endmodule